[CHUNK 3 OF 3]
BUNDLE_6_C_BRIDGE - PART 3
Concatenate all chunks in order to reconstruct.

irectory to ensure frames are created in the right place)
log "   Rendering frames with seed $SEED..."
AUDIO_LONG_ABS="$SCRIPT_DIR/$AUDIO_LONG"  # Convert to absolute path
cd "$OUTPUT_DIR"
"$SCRIPT_DIR/generate_frames" "$AUDIO_LONG_ABS" "$SEED" > "temp/frame_log.txt" 2>&1
cd "$SCRIPT_DIR"

# Check if frames were generated
FRAME_COUNT=$(ls "$OUTPUT_DIR"/frame_*.ppm 2>/dev/null | wc -l)
if [ "$FRAME_COUNT" -eq 0 ]; then
    error "Frame generation failed - no frames found"
fi

success "Generated $FRAME_COUNT frames"

# Step 4: Create final video (run from output directory where frames are)
log "🎬 Step 4: Creating final video..."
AUDIO_LONG_ABS="$SCRIPT_DIR/$AUDIO_LONG"  # Convert to absolute path
cd "$OUTPUT_DIR"

ffmpeg -r 60 -i frame_%04d.ppm \
       -i "$AUDIO_LONG_ABS" \
       -c:v libx264 -c:a aac \
       -pix_fmt yuv420p \
       -shortest "$VIDEO_FINAL" \
       -y >/dev/null 2>&1 || error "Video creation failed"

cd "$SCRIPT_DIR"

# Verify video was created
if [ ! -f "$VIDEO_FINAL" ]; then
    error "Video file was not created"
fi

VIDEO_SIZE=$(du -h "$VIDEO_FINAL" | cut -f1)
VIDEO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "$VIDEO_FINAL" 2>/dev/null)
success "Created final video: ${VIDEO_DURATION}s, $VIDEO_SIZE"

# Step 5: Generate metadata
log "📋 Step 5: Generating metadata..."

cat > "$METADATA_FILE" << EOF
{
  "transaction_hash": "$TX_HASH",
  "seed": "$SEED", 
  "audio_duration": $EXTENDED_DURATION,
  "video_duration": $VIDEO_DURATION,
  "video_size": "$VIDEO_SIZE",
  "video_resolution": "800x600",
  "frame_rate": 60,
  "frame_count": $FRAME_COUNT,
  "generated_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "assembly_version": "v1.0",
  "reproducible": true,
  "files": {
    "video": "$(basename "$VIDEO_FINAL")",
    "audio": "$(basename "$AUDIO_LONG")", 
    "metadata": "$(basename "$METADATA_FILE")"
  }
}
EOF

success "Generated metadata"

# Step 6: Cleanup temporary files
log "🧹 Step 6: Cleaning up..."
rm -f frame_*.ppm
rm -rf "$OUTPUT_DIR/temp"

# Final summary
log "✨ NFT Generation Complete!"
echo ""
echo "📁 Generated Files:"
echo "   🎬 Video: $VIDEO_FINAL"
echo "   🎵 Audio: $AUDIO_LONG"  
echo "   📋 Metadata: $METADATA_FILE"
echo ""
echo "🔍 NFT Details:"
echo "   📝 Transaction: $TX_HASH"
echo "   🎲 Seed: $SEED"
echo "   ⏱️  Duration: ${VIDEO_DURATION}s"
echo "   📦 Size: $VIDEO_SIZE"
echo ""
echo "✅ Ready for NFT marketplace upload!"
echo ""

# Verification hint
echo "🔄 To verify reproducibility, run:"
echo "   ./verify_nft.sh $TX_HASH $VIDEO_FINAL"

---END---

=== FILE: Makefile ===
---BEGIN---
# NotDeafbeef - Root Build System
# Orchestrates builds for both C and Assembly implementations

# Default target builds the stable configuration
all: c-build

# Build C implementation (stable)
c-build:
	$(MAKE) -C src/c

# Export timeline JSON for a given seed (usage: make export_timeline SEED=0xDEADBEEF OUT=path.json)
export_timeline:
	$(MAKE) -C src/c bin/export_timeline
	cd src/c && ./bin/export_timeline $(SEED) $(OUT)

# Visual assembly object files
visual_core.o: src/asm/visual/visual_core.s
	gcc -c src/asm/visual/visual_core.s -o visual_core.o

drawing.o: src/asm/visual/drawing.s
	gcc -c src/asm/visual/drawing.s -o drawing.o

ascii_renderer.o: src/asm/visual/ascii_renderer.s
	gcc -c src/asm/visual/ascii_renderer.s -o ascii_renderer.o

particles.o: src/asm/visual/particles.s
	gcc -c src/asm/visual/particles.s -o particles.o

bass_hits.o: src/asm/visual/bass_hits.s
	gcc -c src/asm/visual/bass_hits.s -o bass_hits.o

terrain.o: src/asm/visual/terrain.s
	gcc -c src/asm/visual/terrain.s -o terrain.o

glitch_system.o: src/asm/visual/glitch_system.s
	gcc -c src/asm/visual/glitch_system.s -o glitch_system.o

# Build visual system with ASM components
vis-build: visual_core.o drawing.o ascii_renderer.o particles.o bass_hits.o terrain.o glitch_system.o
	mkdir -p bin
	gcc -o bin/vis_main src/vis_main.c src/visual_c_stubs.c src/audio_visual_bridge.c src/wav_reader.c visual_core.o drawing.o ascii_renderer.o particles.o bass_hits.o terrain.o glitch_system.o -Iinclude $(shell pkg-config --cflags --libs sdl2) -lm

# Frame generator (no SDL2 required)
generate_frames: visual_core.o drawing.o ascii_renderer.o particles.o bass_hits.o terrain.o glitch_system.o
	gcc -o generate_frames generate_frames.c src/audio_visual_bridge.c src/deterministic_prng.c src/timeline_reader.c simple_wav_reader.c visual_core.o drawing.o ascii_renderer.o particles.o bass_hits.o terrain.o glitch_system.o -Iinclude -Isrc/include -lm

# Build audio system only (for protection verification)
audio:
	$(MAKE) -C src/c segment USE_ASM=1 VOICE_ASM="GENERATOR_ASM KICK_ASM SNARE_ASM HAT_ASM MELODY_ASM LIMITER_ASM"

# Generate test audio files  
test-audio:
	python3 tools/generate_test_wavs.py

# NEW: Generate comprehensive WAV tests for all sounds in both C and ASM
test-comprehensive:
	python3 tools/generate_comprehensive_tests.py

# NEW: Compare C vs ASM WAV files
compare:
	python3 tools/compare_c_vs_asm.py

# NEW: Play specific sound for audition (usage: make play SOUND=kick)
play:
ifndef SOUND
	@echo "Usage: make play SOUND=<sound_name>"
	@echo "Example: make play SOUND=kick"
else
	python3 tools/compare_c_vs_asm.py --play $(SOUND)
endif

# Run test suite
test:
	pytest tests/

# Clean all build artifacts
clean:
	$(MAKE) -C src/c clean
	rm -rf output/
	find . -name "*.o" -delete
	find . -name "*.dSYM" -delete
	rm -f generate_frames 2>/dev/null || true

# Generate a demo audio segment
demo:
	$(MAKE) -C src/c segment
	@echo "Generated demo audio: src/c/seed_0xcafebabe.wav"

# Quick verification that everything works
verify: c-build test-audio
	@echo "✅ NotDeafbeef verification complete!"

# NEW: Full verification including comprehensive tests
verify-full: c-build test-comprehensive compare
	@echo "✅ NotDeafbeef full verification complete!"
	@echo "Check the comparison output above for any issues."

.PHONY: all c-build vis-build audio test-audio test-comprehensive compare play test clean demo verify verify-full

---END---

